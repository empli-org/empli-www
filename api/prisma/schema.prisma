generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["orderByRelation"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Admin {
  id        String   @id @default(cuid())
  userEmail String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Talent {
  id             String          @id @default(cuid())
  name           String?
  age            Int?
  image          String?
  plan           Plan?           @default(FREE)
  verified       Boolean         @default(false)
  userEmail      String?         @unique
  tuitionNumber  Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  careerId       String?
  firstname      String?
  paused         Boolean         @default(false)
  firstName      String?
  bio            String?
  contactInfo    ContactInfo?
  experienceInfo ExperienceInfo?
  postulations   Postulation[]
  skills         Skill[]
  career         Career?         @relation(fields: [careerId], references: [id])
  favedBy        Company[]       @relation("CompanyToTalent")
  saved          Job[]           @relation("JobToTalent")
}

model ExperienceInfo {
  id         String      @id @default(cuid())
  talentId   String      @unique
  time       Float?
  talent     Talent      @relation(fields: [talentId], references: [id], onDelete: Cascade)
  projects   Project[]
  references Reference[]
}

model Career {
  id      String   @id @default(cuid())
  name    String   @unique
  talents Talent[]
}

model Project {
  id           String          @id @default(cuid())
  name         String
  description  String
  startDate    DateTime?
  endDate      DateTime?
  amount       Float?
  verified     Boolean         @default(false)
  jobAreaId    String?
  experienceId String?
  experience   ExperienceInfo? @relation(fields: [experienceId], references: [id])
  area         JobArea?        @relation(fields: [jobAreaId], references: [id])
}

model Location {
  id          String        @id @default(cuid())
  city        String        @unique
  country     String
  zip         String?
  ContactInfo ContactInfo[]
  Job         Job[]
}

model SocialInfo {
  id            String      @id @default(cuid())
  twitter       String?
  facebook      String?
  linkedin      String?
  website       String?
  contactInfoId String      @unique
  ContactInfo   ContactInfo @relation(fields: [contactInfoId], references: [id], onDelete: Cascade)
}

model ContactInfo {
  id         String      @id @default(cuid())
  phone      String?
  address    String?
  city       String?
  zip        String?
  country    String?
  locationId String?
  talentId   String?     @unique
  companyId  String?     @unique
  company    Company?    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location   Location?   @relation(fields: [locationId], references: [id])
  talent     Talent?     @relation(fields: [talentId], references: [id], onDelete: Cascade)
  social     SocialInfo?
}

model JobArea {
  id          String    @id @default(cuid())
  name        String
  description String?
  projects    Project[]
}

model Company {
  id          String       @id @default(cuid())
  name        String
  description String?
  plan        Plan?        @default(FREE)
  userEmail   String?      @unique
  categoryId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  paused      Boolean      @default(false)
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  contactInfo ContactInfo?
  jobs        Job[]
  references  Reference[]
  favorites   Talent[]     @relation("CompanyToTalent")
}

model Category {
  id        String    @id @default(cuid())
  name      String
  companies Company[]
}

model Job {
  id           String        @id @default(cuid())
  code         String        @unique
  title        String
  description  String?
  area         String?
  body         String?
  requiredExp  Int?
  minRate      Float?
  maxRate      Float?
  companyId    String
  locationId   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  published    Boolean       @default(true)
  type         JobType?      @default(FULLTIME)
  image        String?
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location     Location?     @relation(fields: [locationId], references: [id])
  postulations Postulation[]
  savedBy      Talent[]      @relation("JobToTalent")
}

model Reference {
  id           String          @id @default(cuid())
  experienceId String?
  companyId    String?
  description  String
  company      Company?        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  experience   ExperienceInfo? @relation(fields: [experienceId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String  @id @default(cuid())
  name        String
  description String?
  talentId    String?
  talent      Talent? @relation(fields: [talentId], references: [id])
}

model Post {
  id          String   @id @default(cuid())
  image       String?
  title       String
  description String
  category    String?
  body        String
  premium     Boolean  @default(false)
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Media {
  id          String   @id @default(cuid())
  title       String
  description String
  url         String
  category    String?
  image       String?
  premium     Boolean  @default(false)
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Postulation {
  id        String   @id @default(cuid())
  talentId  String?
  jobId     String?
  status    Status   @default(PENDING)
  feedback  String?
  cretedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  job       Job?     @relation(fields: [jobId], references: [id])
  talent    Talent?  @relation(fields: [talentId], references: [id])
}

model Payment {
  id        String @id @default(cuid())
  paymentId String
  plansId   Int?
  Plans     Plans? @relation(fields: [plansId], references: [id])
}

model Plans {
  id         Int       @id @default(autoincrement())
  plan       Json[]
  created_at DateTime  @default(now())
  payments   Payment[]
}

enum JobType {
  FULLTIME
  PARTIME
}

enum Plan {
  FREE
  PREMIUM
  ADVANCED
}

enum Status {
  PENDING
  REJECTED
  ACCEPTED
}
